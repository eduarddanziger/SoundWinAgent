name: Build and save artifacts

on:
  push:
    branches:
      - main
    tags:
      - 'v*'          # SemVer tags for Go tooling
      - 'Release-*'   # (Legacy) still trigger, but v* is preferred
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Unshallow repository
        run: git fetch --prune --unshallow

      - name: Determine version (SemVer)
        id: get_version
        shell: pwsh
        run: |
            $ref = $env:GITHUB_REF
            # Prefer v* tags (SemVer). Fallback: legacy Release-* tags.
            $latestTag = git describe --tags --match "v[0-9]*" --abbrev=0 2>$null
            if (-not $latestTag) {
                $latestTag = git describe --tags --match "Release-*" --abbrev=0
                if (-not $latestTag) {
                    Write-Host "No Release tag found. Using default version 1.0.0."
                    "VERSION=1.0.0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                    exit 0
                }
                # Extract version number from the tag (e.g., Release-1.0.1 -> 1.0.1)
                $versionNumber = $latestTag -replace '^Release-', ''
            }
            else  {
                # Extract version number from the tag (e.g., v1.0.1 -> 1.0.1)
                $versionNumber = $latestTag -replace '^v', ''
            }
            Write-Host "latestTag: $latestTag, versionNumber: $versionNumber"
            $distance = git rev-list --count "$latestTag..HEAD"

            # Append -SP<distance> if distance is greater than 0
            if ($distance -gt 0) {
                # Increment the third number
                $versionParts = $versionNumber -split '\.'
                $versionParts[2] = [int]$versionParts[2] + 1
                $versionNumber = $versionParts -join '.'
                Write-Output "VERSION CORRECTED, versionNumber: $versionNumber"

                # Add SP info
                $distancePadded = $distance.ToString().PadLeft(3, '0')
                Write-Output "DISTANCE PADDED, distancePadded: $distancePadded"
                $version = "$versionNumber-rc$distancePadded"
            } else {
                $version = $versionNumber
            }
            $version = 'v' + $version
            Write-Host "Derived development version: $version (base tag: $latestTag)"
            "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            Write-Host "Using version: $version"

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Restore NuGets
        run: nuget restore SoundWinAgent.sln

      - name: Integrate vcpkg with MSBuild
        run: vcpkg integrate install

      - name: Build with MSBuild
        run: |
          msbuild /p:Configuration=Release /p:VcpkgEnabled=true /p:VcpkgManifestPath=vcpkg.json /p:VcpkgTriplet=x64-windows-static /target:Rebuild -restore
          dotnet publish "Projects/SoundDefaultUI/SoundDefaultUI.csproj" -c Release -p:PublishProfile=FolderProfile -v:minimal

      - name: Ensure Go module metadata
        shell: pwsh
        run: |
          $modDir = Join-Path $PWD 'go/soundagent'
          if (-not (Test-Path $modDir)) { Write-Host "No go/soundagent directory; skipping go.mod creation"; exit 0 }
          $goMod = Join-Path $modDir 'go.mod'
            # NOTE: Update module path to your actual GitHub org/user if different
          $moduleLine = 'module github.com/eduarddanziger/SoundWinAgent/go/soundagent'
          $goVersion = 'go 1.22'
          if (-not (Test-Path $goMod)) {
            Set-Content -Path $goMod -Value @($moduleLine, $goVersion)
            Write-Host "Created go.mod"
          } else {
            Write-Host "go.mod already exists; leaving unchanged"
          }

      - name: Package Go cgo wrapper
        shell: pwsh
        run: |
          $version = '${{ steps.get_version.outputs.VERSION }}'
          $goSrc = Join-Path $PWD 'go/soundagent'
          if (-not (Test-Path $goSrc)) {
            Write-Host "Go package directory not found: $goSrc"
            exit 0
          }
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          $dll = Get-ChildItem -Recurse -Filter 'SoundAgentApiDll.dll' | Select-Object -First 1
          $lib = Get-ChildItem -Recurse -Filter 'SoundAgentApiDll.lib' | Select-Object -First 1
          $files = @()
          foreach ($n in 'soundagent.go','SoundAgentApi.h','go.mod') {
            $p = Join-Path $goSrc $n
            if (Test-Path $p) {
                $files += $p
            }
          }
          if ($dll) {
            $dllTargetFullName = (Join-Path $goSrc $dll.Name)
            if ($dll.FullName -ne $dllTargetFullName) {
              Copy-Item $dll.FullName $goSrc -Force
            }
            $files += $dllTargetFullName
          } else {
            Write-Host "Warning: DLL file not found; Go wrapper may not work: SoundAgentApiDll.dll"
          }

          if ($lib) {
            $libTargetFullName = (Join-Path $goSrc $lib.Name)
            if ($lib.FullName -ne $libTargetFullName) {
              Copy-Item $lib.FullName $goSrc -Force
            }
            $files += $libTargetFullName
          } else {
            Write-Host "Warning: LIB file not found; Go wrapper may not work: SoundAgentApiDll.lib"
          }
          if (-not $files) {
            Write-Host 'No Go wrapper files collected'
            exit 0
          }
          $zip = "artifacts/soundagent-go-$version.zip"
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path $files -DestinationPath $zip
          Write-Host "Created Go package archive $zip"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Artifacts
          path: artifacts\

  publish:
    # Only create/update GitHub Release for SemVer v* tags (skip dev builds and legacy unless desired)
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: Artifacts
          path: build

      - name: Create or update Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERS=${{ needs.build.outputs.version }}
          echo "$GH_TOKEN" | gh auth login --with-token
          if gh release view "$VERS" > /dev/null 2>&1; then
            echo "Release $VERS already exists; updating assets"
          else
            gh release create "$VERS" --title "SoundWinAgent $VERS" --notes "Release $VERS"
          fi
          gh release upload "$VERS" build/*.* --clobber
